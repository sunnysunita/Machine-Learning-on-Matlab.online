function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha
%data = load("ex1data1.txt");
%x = data(:,1);
%y = data(:,2);
%theta = zeros(2,1);
% Initialize some useful values
m = length(y); % number of training examples
%X = [ones(m,1), x];
%num_iters = 1500;
%alpha = 0.01;
J_history = zeros(num_iters, 1);
for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    hypo = X*theta;
    diff = hypo - y;
    
    delta = [];
    for i=1:size(X,2)
        ext = diff.*X(:,i);
        temp = sum(ext)/m;
        delta = [delta; temp];
    end
    
    alpha_pro = alpha*delta;
    dif = theta - alpha_pro;
    theta = dif;
    %disp(theta);
    







    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
